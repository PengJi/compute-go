# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80;
        listen       [::]:80;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

	    location /efile/openapi/v2/file/upload {
            # /auth路径指向一个用于身份验证的内部位置。如果此身份验证请求返回200状态码，表示身份验证通过；如果返回401或403，表示身份验证失败。
            auth_request /auth;
            # 如果身份验证失败并返回401状态码，这行配置将请求重定向到@error401。
            # @error401通常是另一个定义在Nginx配置中的内部位置，用于处理身份验证失败后的逻辑（例如，返回自定义错误页面或者处理其他的错误逻辑）。
	        error_page 401 = @error401;

            # 从身份验证请求的响应头中提取X-Forwarded-User字段，并将其值设置到Nginx变量$user中。
            # $upstream_http_x_forwarded_user指的是来自上游服务器的X-Forwarded-User头部。
	        auth_request_set $user $upstream_http_x_forwarded_user;
            # 将$user变量的值（即经过身份验证的用户名）设置为向后端服务器（目标服务器）发送的X-Forwarded-User头部。
            # 这确保了后端服务器可以接收到并使用这个用户信息。
	        proxy_set_header X-Forwarded-User $user;
            # 将经过身份验证的请求转发（代理）到指定的后端服务器地址，这里是http://192.168.35.140:8080/efile/openapi/v2/file/upload。
            # 这意味着用户的文件上传请求最终会由该后端服务器来处理。
	        proxy_pass http://192.168.35.140:8080/efile/openapi/v2/file/upload;
        }

        location /efile/openapi/v2/file/download {
            auth_request /auth;
            error_page 401 = @error401;

            auth_request_set $user $upstream_http_x_forwarded_user;
            proxy_set_header X-Forwarded-User $user;
            proxy_pass http://192.168.35.140:8080/efile/openapi/v2/file/download;
        }

        location /auth {
            # 声明/auth路径是一个内部位置（internal location）。这意味着它只能被Nginx的内部请求所访问，不能直接被外部客户端访问。
	        internal;
            # 将客户端请求中的Host头部值传递给后端服务器（即设置为Nginx服务器接收到的主机名）。$host是一个Nginx变量，代表请求中的主机名。
            # 确保后端服务器能够接收到正确的主机名信息。
	        proxy_set_header Host $host;
            # 指示Nginx在代理请求时不转发请求体（request body）。由于身份验证请求通常只需要检查头部信息，而不需要请求体，所以这里关闭了请求体的转发。
	        proxy_pass_request_body off;
            # 将Content-Length头部设置为空字符串，实际上是清除了Content-Length头部。由于请求体被关闭了，这个头部也不再需要，因此被清空。
	        proxy_set_header Content-Length "";
            # 将请求代理到指定的后端服务器地址，即 http://172.26.23.163:8080/ac/openapi/v2/tokens/state。
            # 这个路径对应的服务将处理身份验证逻辑，例如检查请求头中是否包含有效的令牌（token）等。
	        proxy_pass http://172.26.23.163:8080/ac/openapi/v2/tokens/state;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2;
#        listen       [::]:443 ssl http2;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers PROFILE=SYSTEM;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }

}
